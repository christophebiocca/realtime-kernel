#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS 452: Kernel 1
\end_layout

\begin_layout Author
Christophe Biocca (#20322763) and Ronuk Raval (#20345750)
\end_layout

\begin_layout Date
May 23, 2012
\end_layout

\begin_layout Section
Compiling and running
\end_layout

\begin_layout Subsection
Source Code
\end_layout

\begin_layout Standard
The source code submitted for this assignment can be found under /u/cbiocca/cs45
2/a2/src/.
 Here are the checksums for the files:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

c759dd22c170820d997777b550a1622b ./Makefile
\end_layout

\begin_layout Plain Layout

3fb369afd0a490365655a5bfa157adf8 ./bwio.h
\end_layout

\begin_layout Plain Layout

a90d3c62c60be7f6178690067e9b05c3 ./cpsr.h
\end_layout

\begin_layout Plain Layout

08d53dce06cf241497d3740bed4e1d02 ./include/kassert.h
\end_layout

\begin_layout Plain Layout

7ccf926195225fcab016186c8c5185fe ./include/stdbool.h
\end_layout

\begin_layout Plain Layout

d3bc866668828a2b5a27afb070309262 ./include/ts7200.h
\end_layout

\begin_layout Plain Layout

1f083cc3eb8d2b6cc7fe0467b7bd871b ./nameserver.h
\end_layout

\begin_layout Plain Layout

f27e0697cf63149e406c799f636b510a ./syscall_ids.h
\end_layout

\begin_layout Plain Layout

823cc9f12f2f3aae700b445b00ab18e5 ./syscalls.h
\end_layout

\begin_layout Plain Layout

fcae53695ab11a2a5b87a5d0a4babb74 ./task.h
\end_layout

\begin_layout Plain Layout

e5b684158b15ff9696859e95f5be24cd ./user_task.h
\end_layout

\begin_layout Plain Layout

4a1d0edb22f4907e727dfab6c4d1d78b ./utils.h
\end_layout

\begin_layout Plain Layout

7a4a9ad794b23492937f73b953f952c8 ./bwio.c
\end_layout

\begin_layout Plain Layout

92fcb43d662fceeceb832217d38b9cea ./kernel.c
\end_layout

\begin_layout Plain Layout

0cad4fa12de69c46253ddbee132f966f ./nameserver.c
\end_layout

\begin_layout Plain Layout

b2e6a0c9b1d796127cbb08c7bc9b45f0 ./rps.c
\end_layout

\begin_layout Plain Layout

2d148088c560b871e5c68dc8ac367b7a ./syscalls.c
\end_layout

\begin_layout Plain Layout

721f0110126a1b9416a624d9a4f2d36b ./task.c
\end_layout

\begin_layout Plain Layout

22a9e52a05620ea80811392cab6667d1 ./user_task.c
\end_layout

\begin_layout Plain Layout

8b9d4ebc6524cc9217514ceb57e0110c ./utils.c
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Executable
\end_layout

\begin_layout Standard
The elf executable is located at /u/cbiocca/cs42/a2/kernel.elf, and has checksum
 a5f4c00340e8e117cf3ebb85ad291355.
 It can also be remade by running make in the src directory.
\end_layout

\begin_layout Subsection
Running the RPS server/players
\end_layout

\begin_layout Standard
Simply typing:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout LyX-Code

load -b 0x00218000 -h 129.97.167.12 "ARM/cs452_05/kernel_k0.elf"
\end_layout

\begin_layout LyX-Code

go
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Will launch the rock paper scissor tasks, namely a nameserver, a rps server,
 and 6 rps clients.
\end_layout

\begin_layout Standard
Each client picks a random number of games that it wants to play, and quits
 after playing that number of rounds, signing up again if its opponent leaves
 and it is not done.
 The server pauses after deciding each match, press Enter to continue.
 All filled games progress concurrently.
\end_layout

\begin_layout Section
The Task System
\end_layout

\begin_layout Subsection
Task Descriptors
\end_layout

\begin_layout Standard
Each task descriptor has 8 fields, for a total of 5 words of space used:
\end_layout

\begin_layout Itemize
An id and the parent id (1 word each).
 The ids encode the index of each task in the global task table (in the
 lowest 8 bits), the priority (in the 5 bits above that) and an ever incrementin
g unique number in the remainder.
\end_layout

\begin_layout Itemize
The spsr and stack pointer of the tasks.
 As the entirety of the task's registers (r0-r12, r14, r15) are on its stack,
 we only need to store these.
\end_layout

\begin_layout Itemize
The next index, which, when this task is in a queue (either a priority queue
 or a receive queue) indicates the index of the next item in the queue in
 the global task table.
\end_layout

\begin_layout Itemize
The head and tail index of the task's receive queue.
\end_layout

\begin_layout Itemize
The status of the task (Ready, Send/Receive/Reply Blocked, Zombie)
\end_layout

\begin_layout Standard
Because the index is limited to 8 bits, only 255 tasks can exist at the
 same time, (index 0 is reserved to act as an analogue to the null pointer).
\end_layout

\begin_layout Subsection
Scheduling
\end_layout

\begin_layout Standard
Scheduling is handled by having 32 different priority queues, each of which
 is a linked list threaded through the global task table using the next
 index of each task.
 Appending a task to a queue is a simple constant time operation, and so
 is shifting it.
 A bit mask is used to keep track of the highest active priority, and the
 queue can be chosen using this bitmask in 5 operations + 1 lookup.
 For now, the scheduler quits when no task is ready to run as, in the absence
 of interrupts, this means that nothing will ever run again.
 The active task is on no queue at all, and so we can easily stop the rescheduli
ng of the active task by not putting it back in its priority queue.
\end_layout

\begin_layout Subsection
Sending messages
\end_layout

\begin_layout Standard
Tasks which are send, receive, or reply blocked aren't in any queues.
 Their status is set to the appropriate value.
 Since the id contains the table index of a task, we can find said task
 in constant time if someone tries to interact with it.
 Every task descriptor has a head and tail index for a receive queue, which
 uses the same code as the priority queues, so that we can append and shift
 in constant time.
 We never copy the messages to the kernel's space, as we know that tasks
 are going to be blocked until the transfer completes.
 This saves considerable time, and simplifies the code.
 To transfer the messages between tasks, we use our own implementation of
 memcpy.
\end_layout

\begin_layout Subsection
Memcpy
\end_layout

\begin_layout Standard
Memcpy is used in the message passing system several times.
 First, copying a word around is special cased as a very common pattern
 and is optimized for minimal overhead.
 Then, there exist two implementations in assembly optimized for block copying
 chunks of memory 4 and 8 words at a time respectively.
\end_layout

\begin_layout Standard
Currently, copying messages is done 4 words at a time, since it is unlikely
 that messages are going to be significantly bigger than that.
 Copying memory in 8 word chunks incurs an overhead is restoring the state
 of certain registers, and as can be observed from the timings, the overhead
 nullifies any possible gains for small multiples of 4 words.
\end_layout

\begin_layout Section
The Nameserver
\end_layout

\begin_layout Standard
The nameserver is always the first task created by the initial user mode
 task.
 As such, its task id is entirely deterministic and is shared as a constant
 between tasks.
\end_layout

\begin_layout Standard
Internally the name server keeps track of 
\family typewriter
(name, task-id)
\family default
 pairs in an unsorted buffer.
 Thus insertion takes O(n) time since registering a name that has been registere
d before overwrites the previous association and lookup takes O(n) time
 since potentially every registered pair needs to be scanned.
 While data structures with better performance characteristics exist (i.e.
 hash tables), linear scans on an unsorted buffer were deemed sufficient
 since the nameserver sees almost all its usage in task initialization,
 where performance isn't critical.
 Linear scans are also trivial to implement, where as hash tables are definitely
 not!
\end_layout

\begin_layout Section
Rock Paper Scissors Server
\end_layout

\begin_layout Standard
The RPS server is capable of tracking 16 clients in 8 simultaneous games.
 Clients are entered into a flat table in pairs.
 When a client sends a request (either playing or quitting) the corresponding
 entry is found by a linear scan (since there are only 16 entries, this
 isn't too terrible) and the state is updated.
 If two opponents have both played, the server replies to both with updated
 results and awaits future plays or quits.
\end_layout

\begin_layout Standard
Like the nameserver, fancier and asymptotically better data structures were
 pre-empted in favour of ease of implementation.
\end_layout

\begin_layout Standard
If the arena is full, this is handled gracefully by the server by replying
 with an appropriate error code to the client that is signing up.
 If clients later quit, spots are opened up to be reused and everything
 continues to work.
\end_layout

\begin_layout Standard
The server runs at a higher priority than the clients and at a lower one
 than the nameserver.
 This is justified by the timings for being send blocked being much better
 than being receive blocked.
\end_layout

\begin_layout Section
Performance Measurements
\end_layout

\begin_layout Standard
The timings were performed from the first instruction of the 
\family typewriter
Send()
\family default
 wrapper code to the last instruction.
 The 40-bit debug timer was used, which uses a reference frequency of 983.04
\begin_inset space ~
\end_inset

kHz.
 The performance of being send blocked first vs.
 being receive blocked was also tested by setting different priorities for
 the sender and the receiver and then swapping them.
 All performance timings where performed on unoptimized code, with caches
 off.
\end_layout

\begin_layout Subsection
Naive 
\family typewriter
memcpy()
\end_layout

\begin_layout Standard
The naive version of 
\family typewriter
memcpy()
\family default
 was a byte by byte copy implemented in C.
 Its advantage was the ability to support messages of arbitrary sizes, but
 it performed quite poorly, especially for larger messages:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\begin_inset space ~
\end_inset

Bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\begin_inset space ~
\end_inset

Bytes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sender priority > Receiver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
384.54
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (379
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
684.61
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (673
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver priority > Sender
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
358.07
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (352
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
652.06
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (641
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
4 word block 
\family typewriter
memcpy()
\end_layout

\begin_layout Standard
Utilizes the 
\family typewriter
stmia
\family default
 and 
\family typewriter
ldmia
\family default
 block load and store instructions to repeatedly unroll the source buffer
 into 4 registers and then store them onto the destination buffer.
 For message passing, passing around messages 1 word long are special cased
 and are also supported with minimal overhead.
 The downside to this is only very specific message lengths are supported.
 As can be seen from the measurements, the difference between copying 4
 bytes and 64 bytes is very small:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\begin_inset space ~
\end_inset

Bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\begin_inset space ~
\end_inset

Bytes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sender priority > Receiver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
358.07
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (352
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
375.37
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (369
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver priority > Sender
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327.56
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (322
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
342.81
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (337
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
8 word block 
\family typewriter
memcpy()
\end_layout

\begin_layout Standard
Implemented in assembly with 
\family typewriter
stmia
\family default
 and 
\family typewriter
ldmia
\family default
.
 Incurs a setup and teardown overhead since certain registers need to saved
 on and popped off the stack after the copy.
 The 1 word message copy is still special cased and so only the 64
\begin_inset space ~
\end_inset

bytes message times are listed.
 As can be seen, the savings from the 4 word block copy are minimal and
 come with a space overhead of requiring messages larger than a word to
 be a multiple of 8 words.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\begin_inset space ~
\end_inset

Bytes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sender priority > Receiver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
371.3
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (365
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Receiver priority > Sender
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
341.8
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathrm{\mu s}$
\end_inset

 (336
\begin_inset space ~
\end_inset

ticks)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
