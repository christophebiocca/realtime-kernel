#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Kernel 4
\end_layout

\begin_layout Author
Christophe Biocca (20322763), Ronuk Raval (20345750)
\end_layout

\begin_layout Part
Files and Operation
\end_layout

\begin_layout Section
Executable
\end_layout

\begin_layout Standard
The executable is located at 
\family typewriter
/u3/cbiocca/cs452/a4/kernel.elf
\family default
 (checksum: 
\family typewriter
e3e38934351dcad594881d68694fd12c
\family default
).
\end_layout

\begin_layout Standard
To remake the executable:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd /u/cbiocca/cs452/a4/src
\end_layout

\begin_layout Plain Layout

make prod
\end_layout

\end_inset


\end_layout

\begin_layout Section
Running the program
\end_layout

\begin_layout Enumerate
The program can be started using the standard commands.
\end_layout

\begin_layout Enumerate
It will take a second or two to boot up, as it needs to reset the track
 to a known state.
\end_layout

\begin_layout Enumerate
Once running, the clock can be found in the top right, the switch positions
 in the center area, and the recently triggered sensors below.
\end_layout

\begin_deeper
\begin_layout Enumerate
The most recently triggered sensor is on the left, less recent sensors on
 the right.
\end_layout

\end_deeper
\begin_layout Enumerate
The command area is at the bottom of the screen.
\end_layout

\begin_deeper
\begin_layout Enumerate
It accepts exactly the 4 required commands.
\end_layout

\begin_layout Enumerate
It is picky about syntax.
 Trailing characters are an error, and so is more than one space as a separator.
 Commands execute when the enter key is typed.
\end_layout

\begin_layout Enumerate
To help diagnose typing errors, if the parser notices that invalid input
 is being entered, it will highlight it in red, starting at the position
 the command became invalid.
 It validates ranges for numeric arguments.
\end_layout

\begin_layout Enumerate
All numbers are in decimal, including switch addresses (Making the center
 switches 153-156 inclusively).
\end_layout

\begin_layout Enumerate
Syntax is case insensitive, all letters are lowercased coming in.
\end_layout

\end_deeper
\begin_layout Subsection
Troubleshooting
\end_layout

\begin_layout Standard
Hopefully this is unneeded, but if necessary, rebooting the train controller,
 clearing the screen and resetting the arm controller before starting the
 program again tends to work nicely.
\end_layout

\begin_layout Section
Source Code
\end_layout

\begin_layout Standard
The source code submitted for this assignment can be found under 
\family typewriter
/u/cbiocca/cs452/a4/src/
\family default
.
 Here are the checksums for the files:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

72192c36055f1628834ec119cef0eb09  ./.gitignore
\end_layout

\begin_layout Plain Layout

03b5d340d9a1b95c65096578688d7151  ./Makefile
\end_layout

\begin_layout Plain Layout

436afe7fc14408ee2f8be159b83c4ac1  ./README.md
\end_layout

\begin_layout Plain Layout

3fb369afd0a490365655a5bfa157adf8  ./include/bwio.h
\end_layout

\begin_layout Plain Layout

c13942a5833307674dba2f254809595d  ./include/cpsr.h
\end_layout

\begin_layout Plain Layout

8dc1fd3b92abd3da0e1d806ebf28d685  ./include/debug.h
\end_layout

\begin_layout Plain Layout

91ee8f0b6de1f3e23857502e3732c852  ./include/kernel/interrupts.h
\end_layout

\begin_layout Plain Layout

f48ea9097d647cf0e299eea0cb838117  ./include/kernel/ipc.h
\end_layout

\begin_layout Plain Layout

59d7d2f549671137c83ac83217db3cd7  ./include/kernel/task.h
\end_layout

\begin_layout Plain Layout

863186b3aed09ec2e649a193068d2848  ./include/lib.h
\end_layout

\begin_layout Plain Layout

7ccf926195225fcab016186c8c5185fe  ./include/stdbool.h
\end_layout

\begin_layout Plain Layout

17e343465e641cdeade5b2d3ba854f49  ./include/ts7200.h
\end_layout

\begin_layout Plain Layout

bc7c6a5438ec13f38f09a255cb494672  ./include/user/clock.h
\end_layout

\begin_layout Plain Layout

b11121fa5217f977a0441d8721f0520d  ./include/user/clock_drawer.h
\end_layout

\begin_layout Plain Layout

c43f99b170424b893e6769414cca0292  ./include/user/init.h
\end_layout

\begin_layout Plain Layout

af578ce26dc1a2dd92828b10bfe1175e  ./include/user/mio.h
\end_layout

\begin_layout Plain Layout

1f083cc3eb8d2b6cc7fe0467b7bd871b  ./include/user/nameserver.h
\end_layout

\begin_layout Plain Layout

1133e3d3b68d8ddfc68f48b6de2a0112  ./include/user/parser.h
\end_layout

\begin_layout Plain Layout

c0ef4d5e49c833b6fca9b06f7845e33f  ./include/user/priorities.h
\end_layout

\begin_layout Plain Layout

b835c4789b9c1fc74ef27e7ea4cbf044  ./include/user/sensor.h
\end_layout

\begin_layout Plain Layout

ee296db2934aa57550a07af53aedcb24  ./include/user/string.h
\end_layout

\begin_layout Plain Layout

510c80529a21d2d6fb7b57b809a2a3d6  ./include/user/syscall.h
\end_layout

\begin_layout Plain Layout

6948a47691ec5fe21fe91d8026a00fa3  ./include/user/tio.h
\end_layout

\begin_layout Plain Layout

ae979424b7c28c93fd2670d5c5fd3870  ./include/user/train.h
\end_layout

\begin_layout Plain Layout

6331b4b9cf91e5c59c8a60e115208e19  ./include/user/turnout.h
\end_layout

\begin_layout Plain Layout

18a3ea45803fc122df5ba9d48b3fe7d5  ./include/user/vt100.h
\end_layout

\begin_layout Plain Layout

25757ddee6d82a16be926075e04b4972  ./kernel/bwio.c
\end_layout

\begin_layout Plain Layout

3880bd8c7594d3b0b5f11e55a7c0f41d  ./kernel/interrupts.c
\end_layout

\begin_layout Plain Layout

3ebd6f0e170452eda4094e49b2bc7507  ./kernel/ipc.c
\end_layout

\begin_layout Plain Layout

2360a9bfca33e539d0d5d5ba3b54133c  ./kernel/kernel.c
\end_layout

\begin_layout Plain Layout

87116f560dc8cc1c63034d6683af6e0f  ./kernel/lib.c
\end_layout

\begin_layout Plain Layout

dd14fd19549466c63fa46409d26d7cdd  ./kernel/task.c
\end_layout

\begin_layout Plain Layout

3b6ae84ef61911a6e73aa9ea533ef23a  ./kernel/task_internal.h
\end_layout

\begin_layout Plain Layout

85a06c179e618d41cfa86f5a51346f43  ./linker.ld
\end_layout

\begin_layout Plain Layout

19efa3e63c74345d8d42dbc0d53aca67  ./user/clock.c
\end_layout

\begin_layout Plain Layout

ae9d089d2f5260d6f2ecaea987e19b67  ./user/clock_drawer.c
\end_layout

\begin_layout Plain Layout

62121b36044b8dcba4e64751af3f5e86  ./user/init.c
\end_layout

\begin_layout Plain Layout

c44b738ca9535d2b611d8f6e8d75053f  ./user/mio.c
\end_layout

\begin_layout Plain Layout

1056255ba9ee68987414d82da357f47e  ./user/nameserver.c
\end_layout

\begin_layout Plain Layout

851bc03d2526c258fafb1e20eac52e9f  ./user/parser.c
\end_layout

\begin_layout Plain Layout

78c446e4d053cdfe04d5b8cff75bef98  ./user/sensor.c
\end_layout

\begin_layout Plain Layout

c3081c37f82e00452ca664a248b2598d  ./user/syscall.c
\end_layout

\begin_layout Plain Layout

8794f6b0e2d12854b1aae442d6ca9801  ./user/tio.c
\end_layout

\begin_layout Plain Layout

4dde6879ea45ce3d503714b45d0f2114  ./user/train.c
\end_layout

\begin_layout Plain Layout

372084ea15e150881995be8123dfabfd  ./user/turnout.c
\end_layout

\begin_layout Plain Layout

e4e84e6ca5e22d9195e88dbee590e5cf  ./user/vt100.c
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Part
Kernel
\end_layout

\begin_layout Section
Context Switch
\end_layout

\begin_layout Standard
At kernel initialization time we declare an static array holding 2 ints.
 We set into the IRQ mode's 
\family typewriter
sp
\family default
 register the address of this array.
\end_layout

\begin_layout Standard
Our code uses one exit routine from kernel to user space:
\end_layout

\begin_layout Enumerate
Clear the IRQ array.
\end_layout

\begin_layout Enumerate
Put user task 
\family typewriter
sp
\family default
 into 
\family typewriter
r0
\end_layout

\begin_layout Enumerate
Put user task 
\family typewriter
spsr
\family default
 into 
\family typewriter
r1
\end_layout

\begin_layout Enumerate
Save kernel registers (
\family typewriter
r2-r12
\family default
, 
\family typewriter
lr
\family default
) onto kernel stack.
 Kernel 
\family typewriter
sp
\family default
 is not saved since it will be preserved across mode switches and 
\family typewriter
pc
\family default
 is set to the right thing by 
\family typewriter
swi
\family default
 instruction on kernel entry.
\end_layout

\begin_layout Enumerate
Pop task 
\family typewriter
pc
\family default
 as first word off 
\family typewriter
r0
\family default
 (task 
\family typewriter
sp
\family default
) into kernel 
\family typewriter
lr
\family default
 (restoring state for 
\family typewriter
movs
\family default
).
\end_layout

\begin_layout Enumerate
Restore 
\family typewriter
spsr
\family default
 from 
\family typewriter
r1
\family default
 (task 
\family typewriter
spsr
\family default
).
\end_layout

\begin_layout Enumerate
Switch to system mode:
\end_layout

\begin_deeper
\begin_layout Enumerate
Restore task 
\family typewriter
sp
\family default
 from 
\family typewriter
r0
\family default
.
\end_layout

\begin_layout Enumerate
Unroll trap frame from task 
\family typewriter
sp
\family default
 (
\family typewriter
r0-r12
\family default
, 
\family typewriter
lr
\family default
).
 Note that this is the task 
\family typewriter
lr
\family default
 and not the kernel 
\family typewriter
lr
\family default
 we set in (4).
\end_layout

\begin_layout Enumerate
Switch to supervisor mode.
\end_layout

\end_deeper
\begin_layout Enumerate
Jump to userspace into the task with 
\family typewriter
movs pc, lr
\family default
.
\end_layout

\begin_layout Standard
Then we have 2 entry points for hardware interrupts an system requests respectiv
ely, both within the same assembly code.
\end_layout

\begin_layout Standard
Handling hardware interrupts:
\end_layout

\begin_layout Enumerate
Store the value of 
\family typewriter
lr
\family default
 (the task's 
\family typewriter
pc
\family default
) into the IRQ array address we stored in 
\family typewriter
sp
\family default
.
\end_layout

\begin_layout Enumerate
Move 
\family typewriter
spsr
\family default
 into lr.
\end_layout

\begin_layout Enumerate
Store the value of 
\family typewriter
lr
\family default
 (the task's 
\family typewriter
sp
\family default
sr) 4 bytes past the IRQ array address we stored in 
\family typewriter
sp
\family default
.
\end_layout

\begin_layout Enumerate
Fall through to the system request handling code (written below).
\end_layout

\begin_layout Standard
Handling system requests (
\family typewriter
swi n
\family default
):
\end_layout

\begin_layout Enumerate
Switch to system mode:
\end_layout

\begin_deeper
\begin_layout Enumerate
Store user registers (
\family typewriter
r0-r12
\family default
, 
\family typewriter
lr
\family default
) on user stack.
 We will save the other registers (
\family typewriter
sp
\family default
 and 
\family typewriter
pc
\family default
) in other ways.
\end_layout

\begin_layout Enumerate
Move 
\family typewriter
sp
\family default
 into 
\family typewriter
r0
\family default
.
\end_layout

\begin_layout Enumerate
Switch to supervisor mode.
\end_layout

\end_deeper
\begin_layout Enumerate
Push 
\family typewriter
lr
\family default
 (the task's 
\family typewriter
pc
\family default
) onto stack pointed by 
\family typewriter
r0
\family default
 (task 
\family typewriter
sp
\family default
) and update 
\family typewriter
r0
\family default
 to new stack head.
\end_layout

\begin_layout Enumerate
Move 
\family typewriter
spsr
\family default
 into 
\family typewriter
r1
\family default
.
\end_layout

\begin_layout Enumerate
Unroll kernel registers from kernel stack (
\family typewriter
r2-r12
\family default
, 
\family typewriter
lr
\family default
).
\end_layout

\begin_layout Enumerate
If the IRQ array has non-zero values:
\end_layout

\begin_deeper
\begin_layout Enumerate
Set array[0] - 4 into the task descriptor 
\family typewriter
pc
\family default
.
\end_layout

\begin_layout Enumerate
Set array[1] into the task descriptor 
\family typewriter
spsr
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
Otherwise:
\end_layout

\begin_deeper
\begin_layout Enumerate
Save 
\family typewriter
r0
\family default
 (task 
\family typewriter
sp
\family default
) into task descriptor for the active task.
\end_layout

\begin_layout Enumerate

\family typewriter
r1
\family default
 (task 
\family typewriter
spsr
\family default
) into task descriptor for the active task.
\end_layout

\end_deeper
\begin_layout Standard
This way we can know if we entered the kernel to handle an interrupt or
 not, and properly save the task's state in either situation.
 This produces a trap frame with the following layout:
\end_layout

\begin_layout LyX-Code
+-----+ <-- SP after trap frame creation
\end_layout

\begin_layout LyX-Code
| PC  |
\end_layout

\begin_layout LyX-Code
| LR  |
\end_layout

\begin_layout LyX-Code
| r12 |
\end_layout

\begin_layout LyX-Code
| r11 |
\end_layout

\begin_layout LyX-Code
| ...
 |
\end_layout

\begin_layout LyX-Code
| r0  |
\end_layout

\begin_layout LyX-Code
+-----+ <-- SP at SWI instruction or hardware interrupt
\end_layout

\begin_layout LyX-Code
| ...
 |
\end_layout

\begin_layout LyX-Code
+-----+
\end_layout

\begin_layout Section
Task Descriptors
\end_layout

\begin_layout Standard
Each task descriptor has 8 fields, for a total of 5 words of space used:
\end_layout

\begin_layout Itemize
An id and the parent id (1 word each).
 The ids encode the index of each task in the global task table (in the
 lowest 8 bits), the priority (in the 5 bits above that) and an ever incrementin
g unique number in the remainder.
\end_layout

\begin_layout Itemize
The spsr and stack pointer of the tasks.
 As the entirety of the task's registers (r0-r12, r14, r15) are on its stack,
 we only need to store these.
\end_layout

\begin_layout Itemize
The next index, which, when this task is in a queue (either a priority queue
 or a receive queue) indicates the index of the next item in the queue in
 the global task table.
\end_layout

\begin_layout Itemize
The head and tail index of the task's receive queue.
\end_layout

\begin_layout Itemize
The status of the task (Ready, Send/Receive/Reply Blocked, Await Blocked,
 Zombie)
\end_layout

\begin_layout Standard
Because the index is limited to 8 bits, only 255 tasks can exist at the
 same time, (index 0 is reserved to act as an analogue to the null pointer).
\end_layout

\begin_layout Section
Scheduling
\end_layout

\begin_layout Standard
Scheduling is handled by having 32 different priority queues, each of which
 is a linked list threaded through the global task table using the next
 index of each task.
 Appending a task to a queue is a simple constant time operation, and so
 is shifting it.
 A bit mask is used to keep track of the highest active priority, and the
 queue can be chosen using this bitmask in 5 operations + 1 lookup 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

.
 The scheduler quits when no task is ready to run and no tasks are awaiting
 interrupts, a state it cannot get out of.
 The active task is on no queue at all, and so we can easily stop the rescheduli
ng of the active task by not putting it back in its priority queue.
\end_layout

\begin_layout Section
Task Creation
\end_layout

\begin_layout Standard
A task is created by specifying a priority, a function pointer, the number
 of words to reserve for it's stack, and the parent task id.
 It then creates an artificial trap frame and sets 
\family typewriter
pc
\family default
 to the value of the function pointer and the frame pointer (
\family typewriter
r12
\family default
) to be equivalent to the 
\family typewriter
sp
\family default
.
 It then allocates a task descriptor and stores this information there.
 Finally, it schedules the descriptor in the right task queue and sets the
 appropriate bit in the bitmask.
\end_layout

\begin_layout Standard
The 
\family typewriter
Create()
\family default
 syscall is implemented by this function.
 Due the API constraints, the 
\family typewriter
Create()
\family default
 syscall currently specifies a stack size of 1024 words, which will break
 horribly should the task need more.
 Currently, there exists no user callable syscall that allows specification
 of the stack size.
\end_layout

\begin_layout Section
Task Deletion
\end_layout

\begin_layout Standard

\family typewriter
Exit()
\family default
 is implemented by dropping the active task (our caller, which is not enqueued
 in any priority queue).
 No effort is made to reclaim task descriptors yet.
\end_layout

\begin_layout Section
Sending messages
\end_layout

\begin_layout Standard
Tasks which are send, receive, or reply blocked aren't in any queues.
 Their status is set to the appropriate value.
 Since the id contains the table index of a task, we can find said task
 in constant time if someone tries to interact with it.
 Every task descriptor has a head and tail index for a receive queue, which
 uses the same code as the priority queues, so that we can append and shift
 in constant time.
 We never copy the messages to the kernel's space, as we know that tasks
 are going to be blocked until the transfer completes.
 This saves considerable time, and simplifies the code.
 To transfer the messages between tasks, we use our own implementation of
 memcpy.
 Messages are required to be exactly 1 word or a multiple of 4 words in
 length.
\end_layout

\begin_layout Section
Handling interrupts
\end_layout

\begin_layout Standard
We maintain a list of 64 pointers to task descriptors to hold on to which
 task is registered to await a given interrupt (Only one task is ever allowed
 to await a specific interrupt).
 The kernel is designed to remain mostly hardware independent: When AwaitEvent
 is called, it writes down the caller in the table and sets the enable bit
 for that specific interrupt.
\end_layout

\begin_layout Standard
When an interrupt occurs, the kernel finds the least significant bit of
 the interrupt status (using 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

) registers, and adds the task at that position in the table to the ready
 queues.
 Then it sets the clear bit for that interrupt.
 The process is repeated until the interrupt status is completely cleared.
 This nicely handles multiple simultaneous interrupts while respecting task
 priorities.
\end_layout

\begin_layout Standard
From the perspective of a task calling AwaitEvent, the interrupt being awaited
 on is masked before and after the call, the only change is that the raw
 status bit is set.
 The kernel doesn't handle volatile data itself or clear the cause of the
 interrupt, it leaves that responsibility to the caller.
\end_layout

\begin_layout Part
Core Servers
\end_layout

\begin_layout Section
Nameserver
\end_layout

\begin_layout Standard
The nameserver is always the first task created by the initial user mode
 task.
 As such, its task id is entirely deterministic and is shared as a constant
 between tasks.
\end_layout

\begin_layout Standard
Internally the name server keeps track of 
\family typewriter
(name, task-id)
\family default
 pairs in an unsorted buffer.
 Thus insertion takes O(n) time since registering a name that has been registere
d before overwrites the previous association and lookup takes O(n) time
 since potentially every registered pair needs to be scanned.
 While data structures with better performance characteristics exist (i.e.
 hash tables), linear scans on an unsorted buffer were deemed sufficient
 since the nameserver sees almost all its usage in task initialization,
 where performance isn't critical.
 Linear scans are also trivial to implement, where as hash tables are definitely
 not!
\end_layout

\begin_layout Section
Clock Server
\end_layout

\begin_layout Standard
The Clock server keeps track of two things:
\end_layout

\begin_layout Enumerate
The current tick count.
\end_layout

\begin_layout Enumerate
The tasks waiting for various tick counts to be reached (ordered, nearest
 deadline first).
\end_layout

\begin_layout Standard
It is almost always waiting for a message from the notifier or a new task.
 It only needs to handle three messages:
\end_layout

\begin_layout Itemize
A request for the current time, to which it simply replies with the tick
 count.
\end_layout

\begin_layout Itemize
A request to DelayUntil a given time.
 The task is given a spot in the queue (linear time insertion).
 Delay(count) is implemented as DelayUntil(Time() + count).
\end_layout

\begin_layout Itemize
A tick from the notifier.
 The server increments the tick count, and shifts tasks from the front of
 the list until the item in front is waiting for a future tick count.
\end_layout

\begin_layout Standard
The time taken to do any of the above tasks is bounded above by the total
 number of tasks which are currently delayed.
 Given that will remain a reasonably small number at all times, this will
 maintain reasonable performance.
\end_layout

\begin_layout Standard
The 508kHz timer clock is used, as the 2kHz clock was found to have significant
 drift.
\end_layout

\begin_layout Section
Interrupt Driven IO
\end_layout

\begin_layout Standard
In many cases, the train IO and the monitor IO are virtually copies of each
 other.
 Thus the description will focus on the similarities between the two and
 only note differences as they arise.
\end_layout

\begin_layout Subsection

\family typewriter
String
\end_layout

\begin_layout Standard
Before diving into the details of server implementation, all IPC (
\family typewriter
Send()
\family default
 and 
\family typewriter
Receive()
\family default
) is specified by a special structure called a 
\family typewriter
String
\family default
.
 A 
\family typewriter
String
\family default
 is composed of:
\end_layout

\begin_layout Enumerate
A 2 bit wide bitfield, called a 
\family typewriter
tag
\family default
.
 This is used by the sender to tell the receiver which command they wish
 to invoke (more on this later).
\end_layout

\begin_layout Enumerate
A 6 bit wide bitfield, called an 
\family typewriter
offset
\family default
.
 This stores the number of characters in the following character buffer.
\end_layout

\begin_layout Enumerate
A 63 byte wide character buffer, which stores the actual contents of the
 string.
\end_layout

\begin_layout Standard
The design of 
\family typewriter
String
\family default
 is carefully chosen to match a number of different constraints.
 First note that the 
\family typewriter
offset
\family default
 field is exactly wide enough to represent the range 0--63 (
\begin_inset Formula $2^{6}-1$
\end_inset

), which matches the width of the character buffer perfectly.
 Secondly, due to the nature of the block 
\family typewriter
memcpy()
\family default
 implemented by message passing, all messages need to be a multiple of 16
 bytes.
 A 
\family typewriter
String
\family default
 is 64 bytes in size and satisfies this constraint.
\end_layout

\begin_layout Standard
We define a number of methods to make it easy to to create and manipulate
 
\family typewriter
String
\family default
s, like appending a character or string.
 It should be noted that appending to a 
\family typewriter
String
\family default
 beyond the 63 byte limit is a runtime error and an assertion is violated,
 which locks the execution of that user task (or the entire system if the
 assertion was violated in the kernel).
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
On startup, the server is responsible for spawning the notifier with the
 correct priority.
 The servers are almost always 
\family typewriter
Receive()
\family default
 blocked.
 They expect 
\family typewriter
String
\family default
s as messages, and use the 
\family typewriter
tag
\family default
 field to figure out what command this 
\family typewriter
String
\family default
 corresponds to.
 Notice that there are only 4 commands accepted by the server, exactly enough
 to be encoded by the 2 bit wide bitfield.
\end_layout

\begin_layout Subsubsection
Receiving Data
\end_layout

\begin_layout Standard
When the notifier receives some data, it immediately populates a 
\family typewriter
String
\family default
 with it and 
\family typewriter
Send()
\family default
's it to the server.
 A 
\family typewriter
Getc()
\family default
 is similarly encoded into the 
\family typewriter
tag
\family default
 and sent to the server.
 When the server has both some data from the notifier and a task awaiting
 that data, it 
\family typewriter
Reply()
\family default
's to the task with the contents of its buffer.
 Multiple notifier messages will be concatenated into the same 
\family typewriter
String
\family default
.
 If the receiver gets more than 63 bytes without anyone reading the data,
 the 
\family typewriter
String
\family default
 runtime assertion is violated.
\end_layout

\begin_layout Subsubsection
Transmitting Data
\end_layout

\begin_layout Standard
Data transmission between the notifier and the server is handled by means
 of a shared ringbuffer character queue.
 This buffer is 512 bytes wide for the monitor and 64 bytes wide for the
 train.
 The ringbuffer is implemented in a lockfree manner; data is loaded into
 the buffer before either the head or tail indices are updated.
 No sequence of interruptions and scheduling will ever lead to an inconsistent
 state in the queue since there is only a single producer (the server) and
 a single consumer (the notifier).
\end_layout

\begin_layout Standard
Once data is loaded onto the buffer and indices are updated, the server
 asserts a software interrupt (
\family typewriter
INT_UART1
\family default
 for train and 
\family typewriter
INT_UART2
\family default
 for monitor).
 This is explained in the notifier description.
\end_layout

\begin_layout Standard
Since data is loaded on a per 
\family typewriter
String
\family default
 basis, we can guaruntee atomicity of up to a 63 byte sequence.
 This is useful for ensuring that cursor addressing sequences work as expected
 and are not interleaved.
\end_layout

\begin_layout Subsubsection
Quitting
\end_layout

\begin_layout Standard
The fourth value a 
\family typewriter
tag
\family default
 command can be is a quit command, which tells the notifier to kill itself
 and quits the forever loop that the server runs in.
\end_layout

\begin_layout Subsection
Notifier
\end_layout

\begin_layout Subsubsection
Monitor
\end_layout

\begin_layout Standard
The monitor notifier enables FIFO's and spends most of its time event blocked
 on 
\family typewriter
INT_UART2
\family default
, which is the OR'd version of the 4 distinct interrupts a UART can generate.
\end_layout

\begin_layout Standard
Receive and receive timeout interrupts are always enabled, and when triggered,
 the notifier fills out a 
\family typewriter
String
\family default
 and sends it to the server.
\end_layout

\begin_layout Standard
The transmit interrupt is only enabled when there is data in the buffer
 left to be transmitted before the 
\family typewriter
AwaitEvent()
\family default
 call.
 This is to prevent useless transmit FIFO empty interrupts when we have
 nothing to transmit.
 However, when the server puts data onto the buffer, it must then raise
 a software interrupt for the interrupt being awaited so the notifier can
 re-evalute the state of the transmit buffer.
 There are only a finite number of cases that must be verified against race
 conditions:
\end_layout

\begin_layout Itemize
Transmit buffer is updated before call to 
\family typewriter
AwaitEvent()
\family default
 
\begin_inset Formula $\implies$
\end_inset

 Transmit interrupt is enabled.
\end_layout

\begin_deeper
\begin_layout Itemize
Only transmit interrupt occurs 
\begin_inset Formula $\implies$
\end_inset

 transmit buffer is sent to FIFO.
 Future software interrupt is no-op.
\end_layout

\begin_layout Itemize
Only software interrupt occurs 
\begin_inset Formula $\implies$
\end_inset

 transmit buffer is sent to FIFO.
 Future transmit interrupt is no-op.
\end_layout

\begin_layout Itemize
Both transmit and software interrupt occur simultaneously 
\begin_inset Formula $\implies$
\end_inset

transmit buffer is sent to FIFO.
 Both interrupts are cleared.
\end_layout

\end_deeper
\begin_layout Itemize
Transmit buffer is updated after call to 
\family typewriter
AwaitEvent()
\family default
 
\begin_inset Formula $\implies$
\end_inset

 Transmit interrupt is not enabled.
 Only software interrupt occurs 
\begin_inset Formula $\implies$
\end_inset

 transmit buffer is sent to FIFO.
 State is then re-evaluated.
\end_layout

\begin_layout Subsubsection
Train
\end_layout

\begin_layout Standard
The train notifier borrows the design of the monitor notifier, except it
 awaits on 
\family typewriter
INT_UART1
\family default
 instead.
 It also disables the FIFO's and always enables the modem status interrupt.
 The modem status interrupt alongside the receive interrupts is used to
 drive a state machine that tracks the transmit buffer being empty, 
\family typewriter
CTS
\family default
 being de-asserted, and 
\family typewriter
CTS
\family default
 being re-asserted.
 Thus, a character is only transmitted if the previous state transitions
 have been seen, as well as checking that the transmit buffer is not currently
 full, 
\family typewriter
CTS
\family default
 is still asserted, the UART is not busy transmitting, and that we have
 data to send.
\end_layout

\begin_layout Standard
The same conditional enabling of transmit interrupt and use of software
 interrupts used by the monitor notifier is used here.
\end_layout

\begin_layout Part
Train control Servers and Tasks
\end_layout

\begin_layout Section
Clock Drawer
\end_layout

\begin_layout Standard
Polls the Time() once, then enters the following loop:
\end_layout

\begin_layout Enumerate
Writes the time to the screen.
\end_layout

\begin_layout Enumerate
Increments the time by 10 ticks.
\end_layout

\begin_layout Enumerate
Calls DelayUntil(time).
\end_layout

\begin_layout Standard
This way the screen is updated on a regular basis, and the printed time
 does not drift from the clock server's time.
\end_layout

\begin_layout Section
Train Planner/Engineer
\end_layout

\begin_layout Standard
The train planner acts a bit like a server, as it is nearly constantly receiving.
 It keeps track of the current speed of each train, the associated task
 id (engineer) if there is one, the target speed and whether the train needs
 to be reversed.
 Whenever a command comes in to control a train, the planner first figures
 out whether an engineer exists for that specific task.
 If not it creates one.
\end_layout

\begin_layout Standard
Engineers have a simple work cycle, they send to the planner, execute the
 command in the reply (Delaying as necessary to ensure the command actually
 completes).
 This repeats forever (or until the system is stopped).
\end_layout

\begin_layout Standard
The planner receives messages from the engineers, checks what commands are
 outstanding, and replies to the engineers with what actions to take.
\end_layout

\begin_layout Section
Sensor Polling
\end_layout

\begin_layout Standard
This tasks simply polls the sensors on a regular basis, measures which ones
 went from low to high since the last reading, and prepends them to the
 list of sensors.
 It also prints this list to the screen.
\end_layout

\begin_layout Section
Parser
\end_layout

\begin_layout Standard
The parse reads input from monitor IO.
 Its state machine is the same as was implemented in assignment 0, the only
 difference being that it delegates most work to the appropriate tasks/servers
 (Except for turnouts, which are still called directly using the appropriate
 library functions).
\end_layout

\begin_layout Standard
Quitting is implemented by signalling all active systems to quit (allowing
 them to turn off running trains for example).
 Eventually, when no running tasks remain, the kernel exits naturally and
 returns control to Redboot.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "bruijn"
key "key-1"

\end_inset

``Count the consecutive zero bits (trailing) on the right with multiply
 and lookup''.
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

<http://graphics.stanford.edu/~seander/bithacks.html#ZerosOnRightMultLookup>
\end_layout

\end_inset

.
 Retrieved May 19, 2012
\end_layout

\end_body
\end_document
